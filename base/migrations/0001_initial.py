# Generated by Django 4.1.5 on 2023-01-13 04:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlgoOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('settings', models.TextField(blank=True)),
                ('positions', models.TextField(blank=True)),
                ('papertrade', models.BooleanField(default=False)),
                ('status', models.CharField(blank=True, max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExpiryDate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(blank=True, max_length=100)),
                ('expirydate', models.DateField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScripMaster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(blank=True, max_length=30)),
                ('symbol', models.CharField(blank=True, max_length=100)),
                ('name', models.CharField(blank=True, max_length=30)),
                ('instrumenttype', models.CharField(blank=True, max_length=30)),
                ('exch_seg', models.CharField(blank=True, max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StrikePrice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(blank=True, max_length=100)),
                ('expirydate', models.DateField(blank=True)),
                ('price', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Underlying',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(blank=True, max_length=100, unique=True)),
                ('underlying', models.CharField(blank=True, max_length=100)),
                ('underlyingType', models.CharField(blank=True, max_length=100)),
                ('lotSize', models.IntegerField(default=0)),
                ('qtyFrezze', models.IntegerField(default=0)),
                ('stepValue', models.FloatField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TradingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apikey', models.CharField(blank=True, max_length=100)),
                ('secretkey', models.CharField(blank=True, max_length=100)),
                ('jwtToken', models.TextField(blank=True, max_length=300)),
                ('refreshToken', models.TextField(blank=True, max_length=300)),
                ('feedToken', models.TextField(blank=True, max_length=300)),
                ('taskid', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(blank=True, max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubscribeSymbol',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symboltoken', models.CharField(blank=True, max_length=30)),
                ('exch_seg', models.CharField(blank=True, max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobileno', models.CharField(blank=True, max_length=12)),
                ('exchanges', models.CharField(blank=True, max_length=100)),
                ('products', models.CharField(blank=True, max_length=100)),
                ('brokerid', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlgoPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buyOrderId', models.CharField(blank=True, max_length=100)),
                ('buyOrderStatus', models.CharField(blank=True, max_length=100)),
                ('sellOrderId', models.CharField(blank=True, max_length=100)),
                ('sellOrderStatus', models.CharField(blank=True, max_length=100)),
                ('symbol', models.CharField(blank=True, max_length=100)),
                ('symboltoken', models.CharField(blank=True, max_length=30)),
                ('exch_seg', models.CharField(blank=True, max_length=30)),
                ('option', models.CharField(blank=True, max_length=30)),
                ('quantity', models.IntegerField(default=0)),
                ('ordertype', models.CharField(blank=True, max_length=30)),
                ('producttype', models.CharField(blank=True, max_length=30)),
                ('transaction', models.CharField(blank=True, max_length=30)),
                ('buyPrice', models.FloatField(default=0)),
                ('sellPrice', models.FloatField(default=0)),
                ('target', models.BooleanField(default=False)),
                ('targetType', models.CharField(blank=True, max_length=30)),
                ('targetValue', models.IntegerField(default=0)),
                ('stoploss', models.BooleanField(default=False)),
                ('stoplossType', models.CharField(blank=True, max_length=30)),
                ('stoplossValue', models.IntegerField(default=0)),
                ('trailSL', models.BooleanField(default=False)),
                ('trailSLType', models.CharField(blank=True, max_length=30)),
                ('trailSLValue', models.IntegerField(default=0)),
                ('pl', models.FloatField(default=0)),
                ('plAmt', models.FloatField(default=0)),
                ('plPct', models.FloatField(default=0)),
                ('trailPrice', models.FloatField(default=0)),
                ('status', models.CharField(blank=True, max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.algoorder')),
            ],
        ),
        migrations.CreateModel(
            name='TradingPrice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('symbol', models.CharField(blank=True, max_length=100)),
                ('symboltoken', models.CharField(blank=True, max_length=30)),
                ('exch_seg', models.CharField(blank=True, max_length=30)),
                ('price', models.FloatField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'symbol')},
            },
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30)),
                ('type', models.CharField(blank=True, max_length=10)),
                ('settings', models.TextField(blank=True)),
                ('positions', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'name')},
            },
        ),
    ]
